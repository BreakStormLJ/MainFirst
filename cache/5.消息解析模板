function parseBagItem( msg )
    local header    = msg:GetHeader()
    local data      = msg:GetData()
    local itemCount = data:ReadShort()
    print( "itemCount:"..itemCount )
    
    
    local packLen
    for i = 1, itemCount, 1 do
        local item = {}
        packLen                 = data:ReadUInt()
        
        
        item.itemId             = data:ReadInt()
        item.typeId             = data:ReadShort()
        item.dura               = data:ReadShort()
        item.duraMax            = data:ReadShort()
        item.btValue            = {}
        
        for m = 1, 21, 1 do
            item.btValue[m]     = data:ReadByte()
        end        
        
        item.num                = data:ReadInt()    
        item.AddValue = {}
        for m = 1, 3, 1 do
            item.AddValue[m]    = data:ReadInt()
        end
        
        item.btType             = data:ReadByte()         
        item.nPrice             = data:ReadInt()
        item.nameLen            = data:ReadByte()
        -- item.name               = data:ReadMultiByte( 30 )
        -- local nameBuff          = LightBuffer:create( item.name, 30 )
        item.name               = data:ReadString( 30 )
  
        item.holes = {}
        for m = 1, 4, 1 do
            item.holes[m]       = data:ReadShort()
        end
        
        item.isBind             = data:ReadByte()
        
        item.updateItem = {}
        for m = 1, 15, 1 do
            item.updateItem     = data:ReadByte()
        end
        

        print( "PackLen:"..packLen )
        print( "itemId:"..item.itemId )
        print( "typeId:"..item.typeId )
        print( "dura:"..item.dura )
        print( "duraMax"..item.duraMax )
        print( "btValue:"..tostring(item.btValue) )
        print( "num:"..item.num )
        print( "AddValue:"..tostring(item.AddValue) )
        print( "btType:"..item.btType )
        print( "nPrice:"..item.nPrice )
        print( "nameLen:"..item.nameLen )
        -- print( "name:"..tostring(item.name).." ,value:"..nameBuff:ReadString() )
        print( "name:"..item.name )
        print( "holes:"..tostring(item.holes) )
        print( "isBind:"..item.isBind )
        print( "updateItem:"..tostring(item.updateItem) )

                
    end
end

function parseRankData( msg )
    local header    = msg:GetHeader()
    local data      = msg:GetData()   
    print( "ID:".. header.msgId..", recog:"..header.recog..", param1:"..header.param1..", param2:"..header.param2..", param3:"..header.param3..", param4"..header.param4.."\n" )
    print( "BufferSize:"..data:GetSize()..", BufferIndex:"..data:GetIndex().." ,DataLen:"..msg:GetDataLength().."\n")
    
    
    local itemCount = data:ReadShort()
    print( "itemCount:"..itemCount )
    for i = 1, itemCount, 1 do
        local item = {}
        item.top                = data:ReadShort()
        item.level              = data:ReadShort()
        item.job                = data:ReadByte()
        data:ReadMultiByte(3)   --skip 3byte
        item.fightPower         = data:ReadUInt()
        item.reserved1          = data:ReadByte()
        item.name               = data:ReadString( 30 )
        item.reserved2          = data:ReadByte()
        item.guildName          = data:ReadString( 30 )
        data:ReadMultiByte(2)
        
        print( "top:"..item.top )
        print( "level:"..item.level )
        print( "job:"..item.job )
        print( "fightPower:"..item.fightPower )
        print( "reserved1:"..item.reserved1 )
        print( "name:"..item.name )
        print( "reserved2:"..item.reserved2 )
        print( "guildName:"..item.guildName )
        print( "--------------------------------------------------------------" )
    end
end

function parseActorInView( msg )
    local header    = msg:GetHeader()
    local data      = msg:GetData()   
    print( "ID:".. header.msgId..", recog:"..header.recog..", param1:"..header.param1..", param2:"..header.param2..", param3:"..header.param3..", param4"..header.param4.."\n" )
    print( "BufferSize:"..data:GetSize()..", BufferIndex:"..data:GetIndex().." ,DataLen:"..msg:GetDataLength().."\n")
    
    
    local itemCount = data:ReadShort()
    print( "itemCount:"..itemCount )
    local actorData
    local actorInfo
    if 2 == itemCount then
        local packLen   = data:ReadUInt()
        actorInfo       = data:ReadString( packLen )
        packLen         = data:ReadUInt()
        actorData       = LightBuffer:create( data:ReadMultiByte( packLen ), packLen )
        -- or
        -- actorData       = data
    else
        print( "parseActorInView Error!!" )
    end
    
    if nil ~= actorInfo then
        print( "ActorInfo:"..actorInfo )
    end
    
    if nil ~= actorData  then
        local actorDesc = {}
        actorDesc.feature               = actorData:ReadInt()
        actorDesc.status                = actorData:ReadInt()
        actorDesc.unknown0              = actorData:ReadInt()
        actorDesc.unknown1              = actorData:ReadInt() 
        actorDesc.unkownn2              = actorData:ReadInt()	   
        actorDesc.npcColorTime          = actorData:ReadShort()
                                          actorData:ReadMultiByte( 2 )  --skip 2 byte
        actorDesc.iceTime               = actorData:ReadInt()
        actorDesc.currHp                = actorData:ReadUInt()
        actorDesc.maxHp                 = actorData:ReadUInt()
        actorDesc.curPower              = actorData:ReadUInt()
        actorDesc.maxPower              = actorData:ReadUInt()
        actorDesc.walkSpeed             = actorData:ReadInt()   
        actorDesc.attackSpeed           = actorData:ReadInt()

        print( "feature:"..actorDesc.feature )
        print( "status:"..actorDesc.status )
        print( "unknown0:"..actorDesc.unknown0 )
        print( "unknown1:"..actorDesc.unknown1 )
        print( "unkownn2:"..actorDesc.unkownn2 )
        print( "npcColorTime:"..actorDesc.npcColorTime )
        print( "iceTime:"..actorDesc.iceTime )
        print( "currHp:"..actorDesc.currHp )
        print( "maxHp"..actorDesc.maxHp )
        print( "curPower:"..actorDesc.curPower )
        print( "maxPower:"..actorDesc.maxPower )
        print( "walkSpeed:"..actorDesc.walkSpeed )
        print( "attackSpeed:"..actorDesc.attackSpeed )
    end
end


local function RegisterMsgHandler()
    local networkCtl    = global.networkCtl
    local msgType       = MsgType
    networkCtl:RegisterLuaHandler( msgType.MSG_SC_PLAYER_ITEM_DATA, parseBagItem )          -- 背包数据
    networkCtl:RegisterLuaHandler( msgType.MSG_SC_RANK_DATA_RESPONSE, parseRankData )        -- 排行榜数据
    networkCtl:RegisterLuaHandler( msgType.MSG_SC_NET_PLAYER_IN_OF_VIEW, parseActorInView )       -- 角色进入视野数据
end